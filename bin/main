#!/usr/bin/env ruby
require_relative '../lib/player.rb'
require_relative '../lib/board.rb'

outputs = {
        ask_input:'Write a letter from A to C and a number from 1 to 3', 
        wrong: 'wrong input', 
        taken: 'already taken'
    }

def welcome
  puts 'Welcome to the Tic Tac Toe game!'
  puts 'do you want to proceed? (y/n)'
  user_answer = gets.chomp.downcase
  if user_answer.match(/y/)
    true
  elsif user_answer.match(/n/)
    puts 'bye'
    false
  else
    puts 'wrong answer'
    welcome
  end
end
def instructions
  puts "Instructions:\n
   1)The game is played on a grid that's 3 squares by 3 squares.\n
   2)Write a letter from A to C\n
    and a number from 1 to 3 \n
    to select the row and the column respectively that you want to play on.\n
   3)Player 1 is X, player 2 is O.\n
   4)Once a player gets 3 marks in a row\n
    (up, down, across, or diagonally) is the winner.\n
   5)If all 9 squares are full, the game is over \n \n"
end

# loop do
#   break unless welcome
#   instructions
#   players = players_setting
#   board_matrix(board)
#   puts "\n"
#   loop do
#     whos_turn?(players, current_player)
###################
#     board = user_choice(board, current_player)
#     # Break unless we have a winner
#     current_player = !current_player
#   end
#   # Method: Play_again? Break if not
# end


# game starts
 loop do
   break unless welcome
   instructions
   puts "Okay master! May I have first player's name?"
   p1 = Player.new(gets.chomp)
   puts "cool! #{p1.name}, what about second player's name?"
   p2 = Player.new(gets.chomp)
   puts "cool! #{p2.name}, let's start to play "
   board = Board.new
   puts board.p_board
   loop do
     puts Player.whos_turn? 
     while true
      puts outputs[:ask_input] 
      input = gets.chomp.upcase
      #puts outputs[:wrong] if board.wrong_input?(input)
      #puts outputs[:taken] if board.already_taken?(input)

      input_status = board.check_input(input)
      #puts outputs[input_status.to_sym] unless input_status == "accepted"
      
      unless input_status == "accepted"
        puts outputs[input_status.to_sym]
        next
      end
      board.modify(Player.current_player, input)
      puts board.p_board
      Player.switch_player
     break
        #board.check_cell(input)
    end
     #board1.round(Player.current_player == )
   end
  
 end
